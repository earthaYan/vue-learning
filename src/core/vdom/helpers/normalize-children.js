/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - 
// because a functional component【函数式组件】
// may return an Array instead of a single root. In this case, just a simple
// normalization【正规化，规范化】 is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 1.当子节点包含组件时【调用场景：render函数是编译生成的】，
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    // 数组拍平
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// 翻译：当子组件包含了总是生成嵌套数组的结构的时候，例如下方情况
// e.g. <template>, <slot>, v-for,
//  or when the children is provided by user
// with hand-written render functions / JSX.
//  In such cases a full normalization【完整规范化】
// is needed to cater to【适应】 all possible types of children values【子组件值】.
/**
 * 调用场景：
 * 1.render函数是用户手写的
 * 2.当编译 slot、v-for 的时候会产生嵌套数组的情况
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children) 
    ? [createTextVNode(children)]//是原始数据类型则创建文本节点
    : Array.isArray(children)
      ? normalizeArrayChildren(children) 
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex/** 嵌套的索引*/?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  // 遍历数组类型的子节点
  for (i = 0; i < children.length; i++) {
    // 获得单个节点c
    c = children[i]
    //判断c的类型,如果c为布尔型或者undefined/null，则进入下一轮
    if (isUndef(c) || typeof c === 'boolean') continue

    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested 嵌套
    if (Array.isArray(c)) {
      // 数组类型时，递归调用normalizeArrayChildren方法
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes 合并相邻的文本节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {
      // 原始数据类型时，通过 createTextVNode 方法转换成 VNode 类型
      if (isTextNode(last)) {
        // merge adjacent text nodes 合并相邻的文本节点
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes 合并相邻的文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
            // 如果子节点是一个列表并且列表依旧嵌套
            // 根据nestedIndex更新他的key
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  // 返回一个数组,数组元素类型为vNode
  return res
}
